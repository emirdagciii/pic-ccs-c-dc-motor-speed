CCS PCM C Compiler, Version 5.015, 5967               19-Þub-24 23:05

               Filename:   C:\Users\Taha\Desktop\CCS C ÇALIÞMALAR\DC MOTOR HIZ KONTROLÜ\KOD\dcmotorhiz.lst

               ROM used:   1330 words (16%)
                           Largest free fragment is 2048
               RAM used:   11 (3%) at main() level
                           36 (10%) worst case
               Stack used: 5 locations
               Stack size: 8

*
0000:  MOVLW  04
0001:  MOVWF  0A
0002:  GOTO   489
0003:  NOP
.................... #include <16f877.h> 
.................... //////////// Standard Header file for the PIC16F877 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F877 
0004:  DATA 0C,22
0005:  DATA 43,10
0006:  DATA CD,37
0007:  DATA F4,37
0008:  DATA 72,05
0009:  DATA C8,34
000A:  DATA 7A,10
000B:  DATA CB,37
000C:  DATA 6E,3A
000D:  DATA F2,37
000E:  DATA EC,3A
000F:  DATA 00,00
0010:  DATA 0C,2B
0011:  DATA 6F,36
0012:  DATA F4,30
0013:  DATA EA,1E
0014:  DATA 25,33
0015:  DATA 20,2B
0016:  DATA 00,00
0017:  DATA C4,32
0018:  DATA E7,32
0019:  DATA F2,1E
001A:  DATA A5,3A
001B:  DATA 00,16
*
00FF:  MOVF   0B,W
0100:  MOVWF  25
0101:  BCF    0B.7
0102:  BSF    03.5
0103:  BSF    03.6
0104:  BSF    0C.7
0105:  BSF    0C.0
0106:  NOP
0107:  NOP
0108:  BCF    03.5
0109:  BCF    03.6
010A:  BTFSC  25.7
010B:  BSF    0B.7
010C:  BSF    03.6
010D:  MOVF   0C,W
010E:  ANDLW  7F
010F:  BTFSC  03.2
0110:  GOTO   153
0111:  BCF    03.6
0112:  MOVWF  25
0113:  BSF    03.6
0114:  MOVF   0D,W
0115:  BCF    03.6
0116:  MOVWF  26
0117:  BSF    03.6
0118:  MOVF   0F,W
0119:  BCF    03.6
011A:  MOVWF  27
011B:  MOVF   25,W
011C:  MOVWF  32
011D:  CALL   0D3
011E:  MOVF   26,W
011F:  BSF    03.6
0120:  MOVWF  0D
0121:  BCF    03.6
0122:  MOVF   27,W
0123:  BSF    03.6
0124:  MOVWF  0F
0125:  BCF    03.6
0126:  MOVF   0B,W
0127:  MOVWF  28
0128:  BCF    0B.7
0129:  BSF    03.5
012A:  BSF    03.6
012B:  BSF    0C.7
012C:  BSF    0C.0
012D:  NOP
012E:  NOP
012F:  BCF    03.5
0130:  BCF    03.6
0131:  BTFSC  28.7
0132:  BSF    0B.7
0133:  BSF    03.6
0134:  RLF    0C,W
0135:  RLF    0E,W
0136:  ANDLW  7F
0137:  BTFSC  03.2
0138:  GOTO   153
0139:  BCF    03.6
013A:  MOVWF  25
013B:  BSF    03.6
013C:  MOVF   0D,W
013D:  BCF    03.6
013E:  MOVWF  26
013F:  BSF    03.6
0140:  MOVF   0F,W
0141:  BCF    03.6
0142:  MOVWF  27
0143:  MOVF   25,W
0144:  MOVWF  32
0145:  CALL   0D3
0146:  MOVF   26,W
0147:  BSF    03.6
0148:  MOVWF  0D
0149:  BCF    03.6
014A:  MOVF   27,W
014B:  BSF    03.6
014C:  MOVWF  0F
014D:  INCF   0D,F
014E:  BTFSC  03.2
014F:  INCF   0F,F
0150:  BCF    03.6
0151:  GOTO   0FF
0152:  BSF    03.6
0153:  BCF    03.6
0154:  BCF    0A.3
0155:  BCF    0A.4
0156:  GOTO   4C7 (RETURN)
0157:  MOVLW  8E
0158:  MOVWF  77
0159:  MOVF   26,W
015A:  MOVWF  78
015B:  MOVF   25,W
015C:  MOVWF  79
015D:  CLRF   7A
015E:  MOVF   78,F
015F:  BTFSS  03.2
0160:  GOTO   16B
0161:  MOVF   79,W
0162:  MOVWF  78
0163:  CLRF   79
0164:  MOVLW  08
0165:  SUBWF  77,F
0166:  MOVF   78,F
0167:  BTFSS  03.2
0168:  GOTO   16B
0169:  CLRF   77
016A:  GOTO   173
016B:  BCF    03.0
016C:  BTFSC  78.7
016D:  GOTO   172
016E:  RLF    79,F
016F:  RLF    78,F
0170:  DECF   77,F
0171:  GOTO   16B
0172:  BCF    78.7
0173:  BCF    0A.3
0174:  BCF    0A.4
0175:  GOTO   4DD (RETURN)
0176:  MOVF   25,W
0177:  BTFSC  03.2
0178:  GOTO   23B
0179:  MOVWF  31
017A:  MOVF   29,W
017B:  BTFSC  03.2
017C:  GOTO   23B
017D:  SUBWF  31,F
017E:  BTFSS  03.0
017F:  GOTO   185
0180:  MOVLW  7F
0181:  ADDWF  31,F
0182:  BTFSC  03.0
0183:  GOTO   23B
0184:  GOTO   18B
0185:  MOVLW  81
0186:  SUBWF  31,F
0187:  BTFSS  03.0
0188:  GOTO   23B
0189:  BTFSC  03.2
018A:  GOTO   23B
018B:  MOVF   31,W
018C:  MOVWF  77
018D:  CLRF   78
018E:  CLRF   79
018F:  CLRF   7A
0190:  CLRF   30
0191:  MOVF   26,W
0192:  MOVWF  2F
0193:  BSF    2F.7
0194:  MOVF   27,W
0195:  MOVWF  2E
0196:  MOVF   28,W
0197:  MOVWF  2D
0198:  MOVLW  19
0199:  MOVWF  31
019A:  MOVF   2C,W
019B:  SUBWF  2D,F
019C:  BTFSC  03.0
019D:  GOTO   1AE
019E:  MOVLW  01
019F:  SUBWF  2E,F
01A0:  BTFSC  03.0
01A1:  GOTO   1AE
01A2:  SUBWF  2F,F
01A3:  BTFSC  03.0
01A4:  GOTO   1AE
01A5:  SUBWF  30,F
01A6:  BTFSC  03.0
01A7:  GOTO   1AE
01A8:  INCF   30,F
01A9:  INCF   2F,F
01AA:  INCF   2E,F
01AB:  MOVF   2C,W
01AC:  ADDWF  2D,F
01AD:  GOTO   1E0
01AE:  MOVF   2B,W
01AF:  SUBWF  2E,F
01B0:  BTFSC  03.0
01B1:  GOTO   1C9
01B2:  MOVLW  01
01B3:  SUBWF  2F,F
01B4:  BTFSC  03.0
01B5:  GOTO   1C9
01B6:  SUBWF  30,F
01B7:  BTFSC  03.0
01B8:  GOTO   1C9
01B9:  INCF   30,F
01BA:  INCF   2F,F
01BB:  MOVF   2B,W
01BC:  ADDWF  2E,F
01BD:  MOVF   2C,W
01BE:  ADDWF  2D,F
01BF:  BTFSS  03.0
01C0:  GOTO   1E0
01C1:  INCF   2E,F
01C2:  BTFSS  03.2
01C3:  GOTO   1E0
01C4:  INCF   2F,F
01C5:  BTFSS  03.2
01C6:  GOTO   1E0
01C7:  INCF   30,F
01C8:  GOTO   1E0
01C9:  MOVF   2A,W
01CA:  IORLW  80
01CB:  SUBWF  2F,F
01CC:  BTFSC  03.0
01CD:  GOTO   1DF
01CE:  MOVLW  01
01CF:  SUBWF  30,F
01D0:  BTFSC  03.0
01D1:  GOTO   1DF
01D2:  INCF   30,F
01D3:  MOVF   2A,W
01D4:  IORLW  80
01D5:  ADDWF  2F,F
01D6:  MOVF   2B,W
01D7:  ADDWF  2E,F
01D8:  BTFSS  03.0
01D9:  GOTO   1BD
01DA:  INCF   2F,F
01DB:  BTFSS  03.2
01DC:  GOTO   1BD
01DD:  INCF   30,F
01DE:  GOTO   1BD
01DF:  BSF    7A.0
01E0:  DECFSZ 31,F
01E1:  GOTO   1E3
01E2:  GOTO   1EE
01E3:  BCF    03.0
01E4:  RLF    2D,F
01E5:  RLF    2E,F
01E6:  RLF    2F,F
01E7:  RLF    30,F
01E8:  BCF    03.0
01E9:  RLF    7A,F
01EA:  RLF    79,F
01EB:  RLF    78,F
01EC:  RLF    32,F
01ED:  GOTO   19A
01EE:  BTFSS  32.0
01EF:  GOTO   1F6
01F0:  BCF    03.0
01F1:  RRF    78,F
01F2:  RRF    79,F
01F3:  RRF    7A,F
01F4:  RRF    32,F
01F5:  GOTO   1F9
01F6:  DECF   77,F
01F7:  BTFSC  03.2
01F8:  GOTO   23B
01F9:  BTFSC  32.7
01FA:  GOTO   222
01FB:  BCF    03.0
01FC:  RLF    2D,F
01FD:  RLF    2E,F
01FE:  RLF    2F,F
01FF:  RLF    30,F
0200:  MOVF   2C,W
0201:  SUBWF  2D,F
0202:  BTFSC  03.0
0203:  GOTO   20E
0204:  MOVLW  01
0205:  SUBWF  2E,F
0206:  BTFSC  03.0
0207:  GOTO   20E
0208:  SUBWF  2F,F
0209:  BTFSC  03.0
020A:  GOTO   20E
020B:  SUBWF  30,F
020C:  BTFSS  03.0
020D:  GOTO   231
020E:  MOVF   2B,W
020F:  SUBWF  2E,F
0210:  BTFSC  03.0
0211:  GOTO   219
0212:  MOVLW  01
0213:  SUBWF  2F,F
0214:  BTFSC  03.0
0215:  GOTO   219
0216:  SUBWF  30,F
0217:  BTFSS  03.0
0218:  GOTO   231
0219:  MOVF   2A,W
021A:  IORLW  80
021B:  SUBWF  2F,F
021C:  BTFSC  03.0
021D:  GOTO   222
021E:  MOVLW  01
021F:  SUBWF  30,F
0220:  BTFSS  03.0
0221:  GOTO   231
0222:  INCF   7A,F
0223:  BTFSS  03.2
0224:  GOTO   231
0225:  INCF   79,F
0226:  BTFSS  03.2
0227:  GOTO   231
0228:  INCF   78,F
0229:  BTFSS  03.2
022A:  GOTO   231
022B:  INCF   77,F
022C:  BTFSC  03.2
022D:  GOTO   23B
022E:  RRF    78,F
022F:  RRF    79,F
0230:  RRF    7A,F
0231:  MOVF   26,W
0232:  MOVWF  31
0233:  MOVF   2A,W
0234:  XORWF  31,F
0235:  BTFSS  31.7
0236:  GOTO   239
0237:  BSF    78.7
0238:  GOTO   23F
0239:  BCF    78.7
023A:  GOTO   23F
023B:  CLRF   77
023C:  CLRF   78
023D:  CLRF   79
023E:  CLRF   7A
023F:  BCF    0A.3
0240:  BCF    0A.4
0241:  GOTO   4EC (RETURN)
0242:  MOVF   0B,W
0243:  MOVWF  26
0244:  BCF    0B.7
0245:  BSF    03.5
0246:  BSF    03.6
0247:  BSF    0C.7
0248:  BSF    0C.0
0249:  NOP
024A:  NOP
024B:  BCF    03.5
024C:  BCF    03.6
024D:  BTFSC  26.7
024E:  BSF    0B.7
024F:  BTFSC  03.0
0250:  GOTO   279
0251:  BSF    03.6
0252:  MOVF   0C,W
0253:  ANDLW  7F
0254:  BCF    03.6
0255:  MOVWF  26
0256:  BSF    03.6
0257:  MOVF   0D,W
0258:  BCF    03.6
0259:  MOVWF  27
025A:  BSF    03.6
025B:  MOVF   0F,W
025C:  BCF    03.6
025D:  MOVWF  28
025E:  MOVF   26,W
025F:  MOVWF  32
0260:  CALL   0D3
0261:  MOVF   27,W
0262:  BSF    03.6
0263:  MOVWF  0D
0264:  BCF    03.6
0265:  MOVF   28,W
0266:  BSF    03.6
0267:  MOVWF  0F
0268:  BCF    03.6
0269:  MOVF   0B,W
026A:  MOVWF  29
026B:  BCF    0B.7
026C:  BSF    03.5
026D:  BSF    03.6
026E:  BSF    0C.7
026F:  BSF    0C.0
0270:  NOP
0271:  NOP
0272:  BCF    03.5
0273:  BCF    03.6
0274:  BTFSC  29.7
0275:  BSF    0B.7
0276:  DECFSZ 25,F
0277:  GOTO   279
0278:  GOTO   298
0279:  BSF    03.6
027A:  RLF    0C,W
027B:  RLF    0E,W
027C:  ANDLW  7F
027D:  BCF    03.6
027E:  MOVWF  26
027F:  BSF    03.6
0280:  MOVF   0D,W
0281:  BCF    03.6
0282:  MOVWF  27
0283:  BSF    03.6
0284:  MOVF   0F,W
0285:  BCF    03.6
0286:  MOVWF  28
0287:  MOVF   26,W
0288:  MOVWF  32
0289:  CALL   0D3
028A:  MOVF   27,W
028B:  BSF    03.6
028C:  MOVWF  0D
028D:  BCF    03.6
028E:  MOVF   28,W
028F:  BSF    03.6
0290:  MOVWF  0F
0291:  INCF   0D,F
0292:  BTFSC  03.2
0293:  INCF   0F,F
0294:  BCF    03.0
0295:  BCF    03.6
0296:  DECFSZ 25,F
0297:  GOTO   242
0298:  RETURN
0299:  BTFSC  03.1
029A:  GOTO   29E
029B:  MOVLW  3A
029C:  MOVWF  04
029D:  BCF    03.7
029E:  CLRF   77
029F:  CLRF   78
02A0:  CLRF   79
02A1:  CLRF   7A
02A2:  CLRF   3A
02A3:  CLRF   3B
02A4:  CLRF   3C
02A5:  CLRF   3D
02A6:  MOVF   39,W
02A7:  IORWF  38,W
02A8:  IORWF  37,W
02A9:  IORWF  36,W
02AA:  BTFSC  03.2
02AB:  GOTO   2DC
02AC:  MOVLW  20
02AD:  MOVWF  3E
02AE:  BCF    03.0
02AF:  RLF    32,F
02B0:  RLF    33,F
02B1:  RLF    34,F
02B2:  RLF    35,F
02B3:  RLF    3A,F
02B4:  RLF    3B,F
02B5:  RLF    3C,F
02B6:  RLF    3D,F
02B7:  MOVF   39,W
02B8:  SUBWF  3D,W
02B9:  BTFSS  03.2
02BA:  GOTO   2C5
02BB:  MOVF   38,W
02BC:  SUBWF  3C,W
02BD:  BTFSS  03.2
02BE:  GOTO   2C5
02BF:  MOVF   37,W
02C0:  SUBWF  3B,W
02C1:  BTFSS  03.2
02C2:  GOTO   2C5
02C3:  MOVF   36,W
02C4:  SUBWF  3A,W
02C5:  BTFSS  03.0
02C6:  GOTO   2D6
02C7:  MOVF   36,W
02C8:  SUBWF  3A,F
02C9:  MOVF   37,W
02CA:  BTFSS  03.0
02CB:  INCFSZ 37,W
02CC:  SUBWF  3B,F
02CD:  MOVF   38,W
02CE:  BTFSS  03.0
02CF:  INCFSZ 38,W
02D0:  SUBWF  3C,F
02D1:  MOVF   39,W
02D2:  BTFSS  03.0
02D3:  INCFSZ 39,W
02D4:  SUBWF  3D,F
02D5:  BSF    03.0
02D6:  RLF    77,F
02D7:  RLF    78,F
02D8:  RLF    79,F
02D9:  RLF    7A,F
02DA:  DECFSZ 3E,F
02DB:  GOTO   2AE
02DC:  MOVF   3A,W
02DD:  MOVWF  00
02DE:  INCF   04,F
02DF:  MOVF   3B,W
02E0:  MOVWF  00
02E1:  INCF   04,F
02E2:  MOVF   3C,W
02E3:  MOVWF  00
02E4:  INCF   04,F
02E5:  MOVF   3D,W
02E6:  MOVWF  00
02E7:  RETURN
02E8:  MOVF   04,W
02E9:  MOVWF  2A
02EA:  MOVF   29,W
02EB:  MOVWF  2C
02EC:  BTFSC  03.2
02ED:  GOTO   37A
02EE:  MOVF   28,W
02EF:  MOVWF  35
02F0:  MOVF   27,W
02F1:  MOVWF  34
02F2:  MOVF   26,W
02F3:  MOVWF  33
02F4:  MOVF   25,W
02F5:  MOVWF  32
02F6:  CLRF   39
02F7:  CLRF   38
02F8:  MOVLW  20
02F9:  MOVWF  37
02FA:  MOVLW  82
02FB:  MOVWF  36
02FC:  MOVF   32,W
02FD:  BTFSC  03.2
02FE:  GOTO   36C
02FF:  MOVWF  3A
0300:  MOVF   36,W
0301:  BTFSC  03.2
0302:  GOTO   36C
0303:  ADDWF  3A,F
0304:  BTFSC  03.0
0305:  GOTO   30D
0306:  MOVLW  7F
0307:  SUBWF  3A,F
0308:  BTFSS  03.0
0309:  GOTO   36C
030A:  BTFSC  03.2
030B:  GOTO   36C
030C:  GOTO   311
030D:  MOVLW  81
030E:  ADDWF  3A,F
030F:  BTFSC  03.0
0310:  GOTO   36C
0311:  MOVF   3A,W
0312:  MOVWF  77
0313:  CLRF   78
0314:  CLRF   79
0315:  CLRF   7A
0316:  MOVF   33,W
0317:  MOVWF  3E
0318:  BSF    3E.7
0319:  MOVF   34,W
031A:  MOVWF  3D
031B:  MOVF   35,W
031C:  MOVWF  3C
031D:  MOVLW  18
031E:  MOVWF  3A
031F:  CLRF   3B
0320:  BTFSS  3C.0
0321:  GOTO   33A
0322:  MOVF   39,W
0323:  ADDWF  7A,F
0324:  BTFSS  03.0
0325:  GOTO   32C
0326:  INCF   79,F
0327:  BTFSS  03.2
0328:  GOTO   32C
0329:  INCF   78,F
032A:  BTFSC  03.2
032B:  BSF    3B.7
032C:  MOVF   38,W
032D:  ADDWF  79,F
032E:  BTFSS  03.0
032F:  GOTO   333
0330:  INCF   78,F
0331:  BTFSC  03.2
0332:  BSF    3B.7
0333:  MOVF   37,W
0334:  MOVWF  34
0335:  BSF    34.7
0336:  MOVF   34,W
0337:  ADDWF  78,F
0338:  BTFSC  03.0
0339:  BSF    3B.7
033A:  RLF    3B,F
033B:  RRF    78,F
033C:  RRF    79,F
033D:  RRF    7A,F
033E:  RRF    3E,F
033F:  RRF    3D,F
0340:  RRF    3C,F
0341:  BCF    03.0
0342:  DECFSZ 3A,F
0343:  GOTO   31F
0344:  MOVLW  01
0345:  ADDWF  77,F
0346:  BTFSC  03.0
0347:  GOTO   36C
0348:  BTFSC  78.7
0349:  GOTO   351
034A:  RLF    3E,F
034B:  RLF    7A,F
034C:  RLF    79,F
034D:  RLF    78,F
034E:  DECF   77,F
034F:  BTFSC  03.2
0350:  GOTO   36C
0351:  BTFSS  3E.7
0352:  GOTO   362
0353:  INCF   7A,F
0354:  BTFSS  03.2
0355:  GOTO   362
0356:  INCF   79,F
0357:  BTFSS  03.2
0358:  GOTO   362
0359:  INCF   78,F
035A:  BTFSS  03.2
035B:  GOTO   362
035C:  RRF    78,F
035D:  RRF    79,F
035E:  RRF    7A,F
035F:  INCF   77,F
0360:  BTFSC  03.2
0361:  GOTO   36C
0362:  MOVF   33,W
0363:  MOVWF  3B
0364:  MOVF   37,W
0365:  XORWF  3B,F
0366:  BTFSS  3B.7
0367:  GOTO   36A
0368:  BSF    78.7
0369:  GOTO   370
036A:  BCF    78.7
036B:  GOTO   370
036C:  CLRF   77
036D:  CLRF   78
036E:  CLRF   79
036F:  CLRF   7A
0370:  MOVF   7A,W
0371:  MOVWF  28
0372:  MOVF   79,W
0373:  MOVWF  27
0374:  MOVF   78,W
0375:  MOVWF  26
0376:  MOVF   77,W
0377:  MOVWF  25
0378:  DECFSZ 2C,F
0379:  GOTO   2EE
037A:  MOVF   28,W
037B:  MOVWF  35
037C:  MOVF   27,W
037D:  MOVWF  34
037E:  MOVF   26,W
037F:  MOVWF  33
0380:  MOVF   25,W
0381:  MOVWF  32
0382:  MOVF   32,W
0383:  SUBLW  B6
0384:  MOVWF  32
0385:  CLRF   7A
0386:  MOVF   33,W
0387:  MOVWF  36
0388:  BSF    33.7
0389:  BCF    03.0
038A:  RRF    33,F
038B:  RRF    34,F
038C:  RRF    35,F
038D:  RRF    7A,F
038E:  RRF    79,F
038F:  RRF    78,F
0390:  RRF    77,F
0391:  DECFSZ 32,F
0392:  GOTO   389
0393:  BTFSS  36.7
0394:  GOTO   3A0
0395:  COMF   77,F
0396:  COMF   78,F
0397:  COMF   79,F
0398:  COMF   7A,F
0399:  INCF   77,F
039A:  BTFSC  03.2
039B:  INCF   78,F
039C:  BTFSC  03.2
039D:  INCF   79,F
039E:  BTFSC  03.2
039F:  INCF   7A,F
03A0:  MOVF   7A,W
03A1:  MOVWF  28
03A2:  MOVF   79,W
03A3:  MOVWF  27
03A4:  MOVF   78,W
03A5:  MOVWF  26
03A6:  MOVF   77,W
03A7:  MOVWF  25
03A8:  BTFSS  28.7
03A9:  GOTO   3B7
03AA:  DECF   2A,F
03AB:  BSF    2A.5
03AC:  COMF   25,F
03AD:  COMF   26,F
03AE:  COMF   27,F
03AF:  COMF   28,F
03B0:  INCF   25,F
03B1:  BTFSC  03.2
03B2:  INCF   26,F
03B3:  BTFSC  03.2
03B4:  INCF   27,F
03B5:  BTFSC  03.2
03B6:  INCF   28,F
03B7:  MOVLW  3B
03B8:  MOVWF  31
03B9:  MOVLW  9A
03BA:  MOVWF  30
03BB:  MOVLW  CA
03BC:  MOVWF  2F
03BD:  CLRF   2E
03BE:  MOVLW  0A
03BF:  MOVWF  2C
03C0:  MOVF   29,W
03C1:  BTFSC  03.2
03C2:  INCF   2A,F
03C3:  BSF    03.1
03C4:  MOVLW  25
03C5:  MOVWF  04
03C6:  BCF    03.7
03C7:  MOVF   28,W
03C8:  MOVWF  35
03C9:  MOVF   27,W
03CA:  MOVWF  34
03CB:  MOVF   26,W
03CC:  MOVWF  33
03CD:  MOVF   25,W
03CE:  MOVWF  32
03CF:  MOVF   31,W
03D0:  MOVWF  39
03D1:  MOVF   30,W
03D2:  MOVWF  38
03D3:  MOVF   2F,W
03D4:  MOVWF  37
03D5:  MOVF   2E,W
03D6:  MOVWF  36
03D7:  CALL   299
03D8:  MOVF   78,W
03D9:  MOVF   77,F
03DA:  BTFSS  03.2
03DB:  GOTO   3EF
03DC:  INCF   29,W
03DD:  SUBWF  2C,W
03DE:  BTFSC  03.2
03DF:  GOTO   3EF
03E0:  MOVF   2A,W
03E1:  BTFSC  03.2
03E2:  GOTO   3F1
03E3:  ANDLW  0F
03E4:  SUBWF  2C,W
03E5:  BTFSC  03.2
03E6:  GOTO   3E9
03E7:  BTFSC  03.0
03E8:  GOTO   421
03E9:  BTFSC  2A.7
03EA:  GOTO   421
03EB:  BTFSC  2A.6
03EC:  GOTO   3F1
03ED:  MOVLW  20
03EE:  GOTO   41D
03EF:  MOVLW  20
03F0:  ANDWF  2A,F
03F1:  BTFSS  2A.5
03F2:  GOTO   3FF
03F3:  BCF    2A.5
03F4:  MOVF   29,W
03F5:  BTFSS  03.2
03F6:  DECF   2A,F
03F7:  MOVF   77,W
03F8:  MOVWF  2A
03F9:  MOVLW  2D
03FA:  MOVWF  32
03FB:  CALL   0D3
03FC:  MOVF   2A,W
03FD:  MOVWF  77
03FE:  CLRF   2A
03FF:  MOVF   29,W
0400:  SUBWF  2C,W
0401:  BTFSS  03.2
0402:  GOTO   40D
0403:  MOVF   77,W
0404:  MOVWF  2A
0405:  MOVLW  2E
0406:  MOVWF  32
0407:  CALL   0D3
0408:  MOVF   2A,W
0409:  MOVWF  77
040A:  MOVLW  20
040B:  ANDWF  2A,F
040C:  MOVLW  00
040D:  MOVLW  30
040E:  BTFSS  2A.5
040F:  GOTO   41D
0410:  BCF    2A.5
0411:  MOVF   29,W
0412:  BTFSS  03.2
0413:  DECF   2A,F
0414:  MOVF   77,W
0415:  MOVWF  2A
0416:  MOVLW  2D
0417:  MOVWF  32
0418:  CALL   0D3
0419:  MOVF   2A,W
041A:  MOVWF  77
041B:  CLRF   2A
041C:  MOVLW  30
041D:  ADDWF  77,F
041E:  MOVF   77,W
041F:  MOVWF  32
0420:  CALL   0D3
0421:  BCF    03.1
0422:  MOVF   31,W
0423:  MOVWF  35
0424:  MOVF   30,W
0425:  MOVWF  34
0426:  MOVF   2F,W
0427:  MOVWF  33
0428:  MOVF   2E,W
0429:  MOVWF  32
042A:  CLRF   39
042B:  CLRF   38
042C:  CLRF   37
042D:  MOVLW  0A
042E:  MOVWF  36
042F:  CALL   299
0430:  MOVF   7A,W
0431:  MOVWF  31
0432:  MOVF   79,W
0433:  MOVWF  30
0434:  MOVF   78,W
0435:  MOVWF  2F
0436:  MOVF   77,W
0437:  MOVWF  2E
0438:  DECFSZ 2C,F
0439:  GOTO   3C3
043A:  BCF    0A.3
043B:  BCF    0A.4
043C:  GOTO   50F (RETURN)
043D:  MOVF   28,W
043E:  CLRF   78
043F:  SUBWF  27,W
0440:  BTFSC  03.0
0441:  GOTO   445
0442:  MOVF   27,W
0443:  MOVWF  77
0444:  GOTO   451
0445:  CLRF   77
0446:  MOVLW  08
0447:  MOVWF  29
0448:  RLF    27,F
0449:  RLF    77,F
044A:  MOVF   28,W
044B:  SUBWF  77,W
044C:  BTFSC  03.0
044D:  MOVWF  77
044E:  RLF    78,F
044F:  DECFSZ 29,F
0450:  GOTO   448
0451:  RETURN
0452:  MOVF   78,W
0453:  MOVF   25,W
0454:  MOVWF  27
0455:  MOVLW  64
0456:  MOVWF  28
0457:  CALL   43D
0458:  MOVF   77,W
0459:  MOVWF  25
045A:  MOVF   78,W
045B:  MOVLW  30
045C:  BTFSS  03.2
045D:  GOTO   465
045E:  BTFSS  26.1
045F:  GOTO   46C
0460:  BTFSC  26.3
0461:  GOTO   46C
0462:  BTFSC  26.4
0463:  MOVLW  20
0464:  GOTO   468
0465:  BCF    26.3
0466:  BCF    26.4
0467:  BSF    26.0
0468:  ADDWF  78,F
0469:  MOVF   78,W
046A:  MOVWF  32
046B:  CALL   0D3
046C:  MOVF   25,W
046D:  MOVWF  27
046E:  MOVLW  0A
046F:  MOVWF  28
0470:  CALL   43D
0471:  MOVF   77,W
0472:  MOVWF  25
0473:  MOVF   78,W
0474:  MOVLW  30
0475:  BTFSS  03.2
0476:  GOTO   47D
0477:  BTFSC  26.3
0478:  GOTO   481
0479:  BTFSS  26.0
047A:  GOTO   481
047B:  BTFSC  26.4
047C:  MOVLW  20
047D:  ADDWF  78,F
047E:  MOVF   78,W
047F:  MOVWF  32
0480:  CALL   0D3
0481:  MOVLW  30
0482:  ADDWF  25,F
0483:  MOVF   25,W
0484:  MOVWF  32
0485:  CALL   0D3
0486:  BCF    0A.3
0487:  BCF    0A.4
0488:  GOTO   529 (RETURN)
....................  
.................... #list 
....................  
.................... #device adc=8 
.................... #use delay(clock=4000000) 
*
001C:  MOVLW  33
001D:  MOVWF  04
001E:  BCF    03.7
001F:  MOVF   00,W
0020:  BTFSC  03.2
0021:  GOTO   030
0022:  MOVLW  01
0023:  MOVWF  78
0024:  CLRF   77
0025:  DECFSZ 77,F
0026:  GOTO   025
0027:  DECFSZ 78,F
0028:  GOTO   024
0029:  MOVLW  4A
002A:  MOVWF  77
002B:  DECFSZ 77,F
002C:  GOTO   02B
002D:  GOTO   02E
002E:  DECFSZ 00,F
002F:  GOTO   022
0030:  RETURN
.................... #fuses XT,NOWDT,NOPUT,NOLVP,NOCPD,NOPROTECT,NODEBUG,NOBROWNOUT,NOWRT 
....................  
.................... #use fast_io(a) 
.................... #use fast_io(b) 
.................... #use fast_io(c) 
....................  
.................... #define use_portb_lcd TRUE 
.................... #include <lcd.c> 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD.C                                     //// 
.................... ////                 Driver for common LCD modules                         //// 
.................... ////                                                                       //// 
.................... ////  lcd_init()   Must be called before any other function.               //// 
.................... ////                                                                       //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         //// 
.................... ////                 \a  Set cursor position to upper left                 //// 
.................... ////                 \f  Clear display, set cursor to upper left           //// 
.................... ////                 \n  Go to start of second line                        //// 
.................... ////                 \b  Move back one position                            //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     //// 
.................... ////              will erase all remanining characters on the current      //// 
.................... ////              line, and move the cursor to the beginning of the next   //// 
.................... ////              line.                                                    //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     //// 
.................... ////              will move the cursor to the start of the current         //// 
.................... ////              line.                                                    //// 
.................... ////                                                                       //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        //// 
.................... ////                                                                       //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             //// 
.................... ////                                                                       //// 
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         //// 
.................... ////              (on=FALSE).                                              //// 
.................... ////                                                                       //// 
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   //// 
.................... ////                                                                       //// 
.................... ////                                                                       //// 
.................... ////  CONFIGURATION                                                        //// 
.................... ////  The LCD can be configured in one of two ways: a.) port access or     //// 
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     //// 
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     //// 
.................... ////  connected to sequential pins on the GPIO.  Pin access                //// 
.................... ////  has no requirements, all 7 bits of the control interface can         //// 
.................... ////  can be connected to any GPIO using several ports.                    //// 
.................... ////                                                                       //// 
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     //// 
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    //// 
.................... ////  of this file to configure the pin order.  If you are using a         //// 
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  //// 
.................... ////  be defined.                                                          //// 
.................... ////                                                                       //// 
.................... ////  Example of port access:                                              //// 
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         //// 
.................... ////                                                                       //// 
.................... ////  To use pin access, the following pins must be defined:               //// 
.................... ////     LCD_ENABLE_PIN                                                    //// 
.................... ////     LCD_RS_PIN                                                        //// 
.................... ////     LCD_RW_PIN                                                        //// 
.................... ////     LCD_DATA4                                                         //// 
.................... ////     LCD_DATA5                                                         //// 
.................... ////     LCD_DATA6                                                         //// 
.................... ////     LCD_DATA7                                                         //// 
.................... ////                                                                       //// 
.................... ////  Example of pin access:                                               //// 
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    //// 
.................... ////     #define LCD_RS_PIN      PIN_E1                                    //// 
.................... ////     #define LCD_RW_PIN      PIN_E2                                    //// 
.................... ////     #define LCD_DATA4       PIN_D4                                    //// 
.................... ////     #define LCD_DATA5       PIN_D5                                    //// 
.................... ////     #define LCD_DATA6       PIN_D6                                    //// 
.................... ////     #define LCD_DATA7       PIN_D7                                    //// 
.................... ////                                                                       //// 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef __LCD_C__ 
.................... #define __LCD_C__ 
....................  
.................... // define the pinout. 
.................... // only required if port access is being used. 
.................... typedef struct   
.................... {                            // This structure is overlayed 
....................    int1 enable;           // on to an I/O port to gain 
....................    int1 rs;               // access to the LCD pins. 
....................    int1 rw;               // The bits are allocated from 
....................    int1 unused;           // low order up.  ENABLE will 
....................    unsigned int     data : 4;         // be LSB pin of that port. 
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT. 
....................    unsigned int    reserved: 8; 
....................   #endif 
.................... } LCD_PIN_MAP; 
....................  
.................... // this is to improve compatability with previous LCD drivers that accepted 
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B. 
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE)) 
....................  #define LCD_DATA_PORT getenv("SFR:PORTB") 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    // these definitions only need to be modified for baseline PICs. 
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions. 
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */ 
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0}; 
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF}; 
.................... #endif 
....................  
.................... ////////////////////// END CONFIGURATION /////////////////////////////////// 
....................  
.................... #ifndef LCD_ENABLE_PIN 
....................    #define lcd_output_enable(x) lcdlat.enable=x 
....................    #define lcd_enable_tris()   lcdtris.enable=0 
.................... #else 
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x) 
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RS_PIN 
....................    #define lcd_output_rs(x) lcdlat.rs=x 
....................    #define lcd_rs_tris()   lcdtris.rs=0 
.................... #else 
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x) 
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RW_PIN 
....................    #define lcd_output_rw(x) lcdlat.rw=x 
....................    #define lcd_rw_tris()   lcdtris.rw=0 
.................... #else 
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x) 
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN) 
.................... #endif 
....................  
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4, 
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver 
.................... // compatible with any code written for the original library 
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7)) 
....................    #define  LCD_DATA4    LCD_DATA0 
....................    #define  LCD_DATA5    LCD_DATA1 
....................    #define  LCD_DATA6    LCD_DATA2 
....................    #define  LCD_DATA7    LCD_DATA3 
.................... #endif 
....................  
.................... #ifndef LCD_DATA4 
.................... #ifndef LCD_DATA_PORT 
....................    #if defined(__PCB__) 
....................       #define LCD_DATA_PORT      0x06     //portb 
....................       #define set_tris_lcd(x)   set_tris_b(x) 
....................    #else 
....................      #if defined(PIN_D0) 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd 
....................      #else 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb 
....................      #endif 
....................    #endif    
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    LCD_PIN_MAP lcd, lcdlat; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
.................... #elif defined(__PCM__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
....................    #byte lcdtris = LCD_DATA_PORT+0x80 
.................... #elif defined(__PCH__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT+9 
....................    #byte lcdtris = LCD_DATA_PORT+0x12 
.................... #elif defined(__PCD__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #word lcd = LCD_DATA_PORT 
....................    #word lcdlat = LCD_DATA_PORT+2 
....................    #word lcdtris = LCD_DATA_PORT-0x02 
.................... #endif 
.................... #endif   //LCD_DATA4 not defined 
....................  
.................... #ifndef LCD_TYPE 
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_TWO 
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_LENGTH 
....................    #define LCD_LINE_LENGTH 20 
.................... #endif 
....................  
.................... unsigned int8 lcd_read_nibble(void); 
....................  
.................... unsigned int8 lcd_read_byte(void) 
.................... { 
....................    unsigned int8 low,high; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_INPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_float(LCD_DATA4); 
....................    output_float(LCD_DATA5); 
....................    output_float(LCD_DATA6); 
....................    output_float(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0xF; 
*
0049:  MOVLW  0F
004A:  BSF    03.5
004B:  ANDWF  06,W
004C:  IORLW  F0
004D:  MOVWF  06
....................   #endif 
....................  #endif 
....................          
....................    lcd_output_rw(1); 
004E:  BCF    03.5
004F:  BSF    06.2
....................    delay_cycles(1); 
0050:  NOP
....................    lcd_output_enable(1); 
0051:  BSF    06.0
....................    delay_cycles(1); 
0052:  NOP
....................    high = lcd_read_nibble(); 
0053:  CALL   03D
0054:  MOVF   78,W
0055:  MOVWF  3A
....................        
....................    lcd_output_enable(0); 
0056:  BCF    06.0
....................    delay_cycles(1); 
0057:  NOP
....................    lcd_output_enable(1); 
0058:  BSF    06.0
....................    delay_us(1); 
0059:  NOP
....................    low = lcd_read_nibble(); 
005A:  CALL   03D
005B:  MOVF   78,W
005C:  MOVWF  39
....................        
....................    lcd_output_enable(0); 
005D:  BCF    06.0
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
005E:  MOVLW  0F
005F:  BSF    03.5
0060:  ANDWF  06,W
0061:  MOVWF  06
....................   #endif 
....................  #endif 
....................  
....................    return( (high<<4) | low); 
0062:  BCF    03.5
0063:  SWAPF  3A,W
0064:  MOVWF  77
0065:  MOVLW  F0
0066:  ANDWF  77,F
0067:  MOVF   77,W
0068:  IORWF  39,W
0069:  MOVWF  78
.................... } 
....................  
.................... unsigned int8 lcd_read_nibble(void) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    unsigned int8 n = 0x00; 
....................  
....................    /* Read the data port */ 
....................    n |= input(LCD_DATA4); 
....................    n |= input(LCD_DATA5) << 1; 
....................    n |= input(LCD_DATA6) << 2; 
....................    n |= input(LCD_DATA7) << 3; 
....................     
....................    return(n); 
....................   #else 
....................    return(lcd.data); 
*
003D:  MOVF   06,W
003E:  MOVWF  77
003F:  SWAPF  06,W
0040:  ANDLW  0F
0041:  MOVWF  78
....................   #endif 
0042:  RETURN
.................... } 
....................  
.................... void lcd_send_nibble(unsigned int8 n) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    /* Write to the data port */ 
....................    output_bit(LCD_DATA4, bit_test(n, 0)); 
....................    output_bit(LCD_DATA5, bit_test(n, 1)); 
....................    output_bit(LCD_DATA6, bit_test(n, 2)); 
....................    output_bit(LCD_DATA7, bit_test(n, 3)); 
....................   #else       
....................    lcdlat.data = n; 
*
0031:  SWAPF  3A,W
0032:  ANDLW  F0
0033:  MOVWF  77
0034:  MOVLW  0F
0035:  ANDWF  06,W
0036:  IORWF  77,W
0037:  MOVWF  06
....................   #endif 
....................        
....................    delay_cycles(1); 
0038:  NOP
....................    lcd_output_enable(1); 
0039:  BSF    06.0
....................    delay_us(2); 
003A:  GOTO   03B
....................    lcd_output_enable(0); 
003B:  BCF    06.0
003C:  RETURN
.................... } 
....................  
.................... void lcd_send_byte(unsigned int8 address, unsigned int8 n) 
.................... { 
....................   #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................   #else 
....................    lcd_enable_tris(); 
*
0043:  BSF    03.5
0044:  BCF    06.0
....................    lcd_rs_tris(); 
0045:  BCF    06.1
....................    lcd_rw_tris(); 
0046:  BCF    06.2
....................   #endif 
....................  
....................    lcd_output_rs(0); 
0047:  BCF    03.5
0048:  BCF    06.1
....................    while ( bit_test(lcd_read_byte(),7) ) ; 
*
006A:  MOVF   78,W
006B:  MOVWF  39
006C:  BTFSC  39.7
006D:  GOTO   049
....................    lcd_output_rs(address); 
006E:  BTFSS  37.0
006F:  BCF    06.1
0070:  BTFSC  37.0
0071:  BSF    06.1
....................    delay_cycles(1); 
0072:  NOP
....................    lcd_output_rw(0); 
0073:  BCF    06.2
....................    delay_cycles(1); 
0074:  NOP
....................    lcd_output_enable(0); 
0075:  BCF    06.0
....................    lcd_send_nibble(n >> 4); 
0076:  SWAPF  38,W
0077:  MOVWF  39
0078:  MOVLW  0F
0079:  ANDWF  39,F
007A:  MOVF   39,W
007B:  MOVWF  3A
007C:  CALL   031
....................    lcd_send_nibble(n & 0xf); 
007D:  MOVF   38,W
007E:  ANDLW  0F
007F:  MOVWF  39
0080:  MOVWF  3A
0081:  CALL   031
0082:  RETURN
.................... } 
....................  
.................... #if defined(LCD_EXTENDED_NEWLINE) 
.................... unsigned int8 g_LcdX, g_LcdY; 
.................... #endif 
....................  
.................... void lcd_init(void)  
.................... { 
....................    unsigned int8 i; 
....................    unsigned int8 LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6}; 
0083:  MOVLW  28
0084:  MOVWF  26
0085:  MOVLW  0C
0086:  MOVWF  27
0087:  MOVLW  01
0088:  MOVWF  28
0089:  MOVLW  06
008A:  MOVWF  29
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................     
....................  
....................    lcd_output_enable(0); 
008B:  BCF    06.0
....................    lcd_output_rs(0); 
008C:  BCF    06.1
....................    lcd_output_rw(0); 
008D:  BCF    06.2
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
008E:  MOVLW  0F
008F:  BSF    03.5
0090:  ANDWF  06,W
0091:  MOVWF  06
....................   #endif 
....................    lcd_enable_tris(); 
0092:  BCF    06.0
....................    lcd_rs_tris(); 
0093:  BCF    06.1
....................    lcd_rw_tris(); 
0094:  BCF    06.2
....................  #endif 
....................      
....................    delay_ms(15); 
0095:  MOVLW  0F
0096:  BCF    03.5
0097:  MOVWF  33
0098:  CALL   01C
....................    for(i=1;i<=3;++i) 
0099:  MOVLW  01
009A:  MOVWF  25
009B:  MOVF   25,W
009C:  SUBLW  03
009D:  BTFSS  03.0
009E:  GOTO   0A7
....................    { 
....................        lcd_send_nibble(3); 
009F:  MOVLW  03
00A0:  MOVWF  3A
00A1:  CALL   031
....................        delay_ms(5); 
00A2:  MOVLW  05
00A3:  MOVWF  33
00A4:  CALL   01C
00A5:  INCF   25,F
00A6:  GOTO   09B
....................    } 
....................     
....................    lcd_send_nibble(2); 
00A7:  MOVLW  02
00A8:  MOVWF  3A
00A9:  CALL   031
....................    delay_ms(5); 
00AA:  MOVLW  05
00AB:  MOVWF  33
00AC:  CALL   01C
....................    for(i=0;i<=3;++i) 
00AD:  CLRF   25
00AE:  MOVF   25,W
00AF:  SUBLW  03
00B0:  BTFSS  03.0
00B1:  GOTO   0BE
....................       lcd_send_byte(0,LCD_INIT_STRING[i]); 
00B2:  MOVLW  26
00B3:  ADDWF  25,W
00B4:  MOVWF  04
00B5:  BCF    03.7
00B6:  MOVF   00,W
00B7:  MOVWF  2A
00B8:  CLRF   37
00B9:  MOVF   2A,W
00BA:  MOVWF  38
00BB:  CALL   043
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
00BC:  INCF   25,F
00BD:  GOTO   0AE
00BE:  BCF    0A.3
00BF:  BCF    0A.4
00C0:  GOTO   4C0 (RETURN)
....................    g_LcdX = 0; 
....................    g_LcdY = 0; 
....................   #endif 
.................... } 
....................  
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    unsigned int8 address; 
....................     
....................    if(y!=1) 
00C1:  DECFSZ 34,W
00C2:  GOTO   0C4
00C3:  GOTO   0C7
....................       address=LCD_LINE_TWO; 
00C4:  MOVLW  40
00C5:  MOVWF  35
00C6:  GOTO   0C8
....................    else 
....................       address=0; 
00C7:  CLRF   35
....................       
....................    address+=x-1; 
00C8:  MOVLW  01
00C9:  SUBWF  33,W
00CA:  ADDWF  35,F
....................    lcd_send_byte(0,0x80|address); 
00CB:  MOVF   35,W
00CC:  IORLW  80
00CD:  MOVWF  36
00CE:  CLRF   37
00CF:  MOVF   36,W
00D0:  MOVWF  38
00D1:  CALL   043
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
00D2:  RETURN
....................    g_LcdX = x - 1; 
....................    g_LcdY = y - 1; 
....................   #endif 
.................... } 
....................  
.................... void lcd_putc(char c) 
.................... { 
....................    switch (c) 
00D3:  MOVF   32,W
00D4:  XORLW  07
00D5:  BTFSC  03.2
00D6:  GOTO   0E1
00D7:  XORLW  0B
00D8:  BTFSC  03.2
00D9:  GOTO   0E6
00DA:  XORLW  06
00DB:  BTFSC  03.2
00DC:  GOTO   0EE
00DD:  XORLW  02
00DE:  BTFSC  03.2
00DF:  GOTO   0F4
00E0:  GOTO   0F9
....................    { 
....................       case '\a'   :  lcd_gotoxy(1,1);     break; 
00E1:  MOVLW  01
00E2:  MOVWF  33
00E3:  MOVWF  34
00E4:  CALL   0C1
00E5:  GOTO   0FE
....................  
....................       case '\f'   :  lcd_send_byte(0,1); 
00E6:  CLRF   37
00E7:  MOVLW  01
00E8:  MOVWF  38
00E9:  CALL   043
....................                      delay_ms(2); 
00EA:  MOVLW  02
00EB:  MOVWF  33
00EC:  CALL   01C
....................                     #if defined(LCD_EXTENDED_NEWLINE) 
....................                      g_LcdX = 0; 
....................                      g_LcdY = 0; 
....................                     #endif 
....................                      break; 
00ED:  GOTO   0FE
....................  
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break; 
....................       case '\n'   : 
....................          while (g_LcdX++ < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, ' '); 
....................          } 
....................          lcd_gotoxy(1, g_LcdY+2); 
....................          break; 
....................      #else 
....................       case '\n'   : lcd_gotoxy(1,2);        break; 
00EE:  MOVLW  01
00EF:  MOVWF  33
00F0:  MOVLW  02
00F1:  MOVWF  34
00F2:  CALL   0C1
00F3:  GOTO   0FE
....................      #endif 
....................       
....................       case '\b'   : lcd_send_byte(0,0x10);  break; 
00F4:  CLRF   37
00F5:  MOVLW  10
00F6:  MOVWF  38
00F7:  CALL   043
00F8:  GOTO   0FE
....................       
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       default     :  
....................          if (g_LcdX < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, c); 
....................             g_LcdX++; 
....................          } 
....................          break; 
....................      #else 
....................       default     : lcd_send_byte(1,c);     break; 
00F9:  MOVLW  01
00FA:  MOVWF  37
00FB:  MOVF   32,W
00FC:  MOVWF  38
00FD:  CALL   043
....................      #endif 
....................    } 
00FE:  RETURN
.................... } 
....................   
.................... char lcd_getc(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    char value; 
....................  
....................    lcd_gotoxy(x,y); 
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................    lcd_output_rs(1); 
....................    value = lcd_read_byte(); 
....................    lcd_output_rs(0); 
....................     
....................    return(value); 
.................... } 
....................  
.................... // write a custom character to the ram 
.................... // which is 0-7 and specifies which character array we are modifying. 
.................... // ptr points to an array of 8 bytes, where each byte is the next row of 
.................... //    pixels.  only bits 0-4 are used.  the last row is the cursor row, and 
.................... //    usually you will want to leave this byte 0x00. 
.................... void lcd_set_cgram_char(unsigned int8 which, unsigned int8 *ptr) 
.................... { 
....................    unsigned int i; 
....................  
....................    which <<= 3; 
....................    which &= 0x38; 
....................  
....................    lcd_send_byte(0, 0x40 | which);  //set cgram address 
....................  
....................    for(i=0; i<8; i++) 
....................    { 
....................       lcd_send_byte(1, *ptr++); 
....................    } 
....................    
....................    #if defined(LCD_EXTENDED_NEWLINE) 
....................     lcd_gotoxy(g_LcdX+1, g_LcdY+1);  //set ddram address 
....................    #endif 
.................... } 
....................  
.................... void lcd_cursor_on(int1 on) 
.................... { 
....................    if (on) 
....................    { 
....................       lcd_send_byte(0,0x0F);           //turn LCD cursor ON 
....................    } 
....................    else 
....................    { 
....................       lcd_send_byte(0,0x0C);           //turn LCD cursor OFF 
....................    } 
.................... } 
....................  
.................... #endif 
....................  
....................  
.................... unsigned int deger; 
.................... float voltaj; 
....................  
.................... void main() 
*
0489:  MOVF   03,W
048A:  ANDLW  1F
048B:  MOVWF  03
048C:  BSF    03.5
048D:  BSF    1F.0
048E:  BSF    1F.1
048F:  BSF    1F.2
0490:  BCF    1F.3
0491:  BCF    03.7
.................... { 
....................    setup_psp(PSP_DISABLED); 
0492:  BCF    09.4
....................    setup_timer_1(T1_DISABLED); 
0493:  BCF    03.5
0494:  CLRF   10
....................    setup_timer_2(T2_DIV_BY_4,255,1); 
0495:  MOVLW  00
0496:  MOVWF  78
0497:  IORLW  05
0498:  MOVWF  12
0499:  MOVLW  FF
049A:  BSF    03.5
049B:  MOVWF  12
....................  
....................     
....................    setup_CCP1(CCP_PWM); 
049C:  BCF    03.5
049D:  BCF    07.2
049E:  MOVLW  0C
049F:  MOVWF  17
....................    setup_CCP2(CCP_OFF); 
04A0:  MOVLW  F0
04A1:  ANDWF  1D,F
....................     
....................    setup_adc(adc_clock_div_32); 
04A2:  BCF    1F.6
04A3:  BSF    1F.7
04A4:  BSF    03.5
04A5:  BCF    1F.7
04A6:  BCF    03.5
04A7:  BSF    1F.0
....................    setup_adc_ports(ALL_ANALOG); 
04A8:  BSF    03.5
04A9:  BCF    1F.0
04AA:  BCF    1F.1
04AB:  BCF    1F.2
04AC:  BCF    1F.3
....................    
....................    set_tris_a(0x20); 
04AD:  MOVLW  20
04AE:  MOVWF  05
....................    set_tris_b(0x00); 
04AF:  MOVLW  00
04B0:  MOVWF  06
....................    set_tris_c(0x00); 
04B1:  MOVWF  07
....................     
....................     
....................     
....................    set_adc_channel(4); 
04B2:  MOVLW  20
04B3:  MOVWF  78
04B4:  BCF    03.5
04B5:  MOVF   1F,W
04B6:  ANDLW  C7
04B7:  IORWF  78,W
04B8:  MOVWF  1F
....................    delay_us(20); 
04B9:  MOVLW  06
04BA:  MOVWF  77
04BB:  DECFSZ 77,F
04BC:  GOTO   4BB
04BD:  NOP
....................     
....................    output_c(0x00); 
04BE:  CLRF   07
....................    lcd_init(); 
04BF:  GOTO   083
....................    printf(lcd_putc,"\fDC Motor\nHiz Kontrolu"); 
04C0:  MOVLW  04
04C1:  BSF    03.6
04C2:  MOVWF  0D
04C3:  MOVLW  00
04C4:  MOVWF  0F
04C5:  BCF    03.6
04C6:  GOTO   0FF
....................    delay_ms(1000); 
04C7:  MOVLW  04
04C8:  MOVWF  25
04C9:  MOVLW  FA
04CA:  MOVWF  33
04CB:  CALL   01C
04CC:  DECFSZ 25,F
04CD:  GOTO   4C9
....................     
....................    set_pwm1_duty(0); 
04CE:  CLRF   15
....................     
....................    while(true){ 
....................     
....................    deger=read_adc(); 
04CF:  BSF    1F.2
04D0:  BTFSC  1F.2
04D1:  GOTO   4D0
04D2:  MOVF   1E,W
04D3:  MOVWF  20
....................    delay_us(20); 
04D4:  MOVLW  06
04D5:  MOVWF  77
04D6:  DECFSZ 77,F
04D7:  GOTO   4D6
04D8:  NOP
....................    voltaj=deger/17.0; 
04D9:  CLRF   26
04DA:  MOVF   20,W
04DB:  MOVWF  25
04DC:  GOTO   157
04DD:  MOVF   7A,W
04DE:  MOVWF  28
04DF:  MOVF   79,W
04E0:  MOVWF  27
04E1:  MOVF   78,W
04E2:  MOVWF  26
04E3:  MOVF   77,W
04E4:  MOVWF  25
04E5:  CLRF   2C
04E6:  CLRF   2B
04E7:  MOVLW  08
04E8:  MOVWF  2A
04E9:  MOVLW  83
04EA:  MOVWF  29
04EB:  GOTO   176
04EC:  MOVF   7A,W
04ED:  MOVWF  24
04EE:  MOVF   79,W
04EF:  MOVWF  23
04F0:  MOVF   78,W
04F1:  MOVWF  22
04F2:  MOVF   77,W
04F3:  MOVWF  21
....................    
....................  
....................     
....................    output_high(pin_c3); 
04F4:  BSF    07.3
....................    output_low(pin_c4); 
04F5:  BCF    07.4
....................     
....................    set_pwm1_duty(deger); 
04F6:  MOVF   20,W
04F7:  MOVWF  15
....................     
....................    printf(lcd_putc,"\fVoltaj=%f V",voltaj); 
04F8:  MOVLW  10
04F9:  BSF    03.6
04FA:  MOVWF  0D
04FB:  MOVLW  00
04FC:  MOVWF  0F
04FD:  BCF    03.0
04FE:  MOVLW  08
04FF:  BCF    03.6
0500:  MOVWF  25
0501:  CALL   242
0502:  MOVLW  89
0503:  MOVWF  04
0504:  MOVF   24,W
0505:  MOVWF  28
0506:  MOVF   23,W
0507:  MOVWF  27
0508:  MOVF   22,W
0509:  MOVWF  26
050A:  MOVF   21,W
050B:  MOVWF  25
050C:  MOVLW  02
050D:  MOVWF  29
050E:  GOTO   2E8
050F:  MOVLW  20
0510:  MOVWF  32
0511:  CALL   0D3
0512:  MOVLW  56
0513:  MOVWF  32
0514:  CALL   0D3
....................    lcd_gotoxy(1,2); 
0515:  MOVLW  01
0516:  MOVWF  33
0517:  MOVLW  02
0518:  MOVWF  34
0519:  CALL   0C1
....................    printf(lcd_putc,"Deger=%u",deger); 
051A:  MOVLW  17
051B:  BSF    03.6
051C:  MOVWF  0D
051D:  MOVLW  00
051E:  MOVWF  0F
051F:  BCF    03.0
0520:  MOVLW  06
0521:  BCF    03.6
0522:  MOVWF  25
0523:  CALL   242
0524:  MOVF   20,W
0525:  MOVWF  25
0526:  MOVLW  1B
0527:  MOVWF  26
0528:  GOTO   452
....................    delay_ms(1000); 
0529:  MOVLW  04
052A:  MOVWF  25
052B:  MOVLW  FA
052C:  MOVWF  33
052D:  CALL   01C
052E:  DECFSZ 25,F
052F:  GOTO   52B
0530:  GOTO   4CF
....................  
....................     
....................    } 
....................     
....................     
....................     
....................    } 
....................     
0531:  SLEEP
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  

Configuration Fuses:
   Word  1: 3F39   XT NOWDT NOPUT NOBROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
